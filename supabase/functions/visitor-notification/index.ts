const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

interface VisitorData {
  timestamp: string;
  userAgent: string;
  referrer: string;
  ip: string;
  page: string;
}

Deno.serve(async (req: Request) => {
  try {
    if (req.method === 'OPTIONS') {
      return new Response(null, {
        status: 200,
        headers: corsHeaders,
      });
    }

    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'Method not allowed' }), {
        status: 405,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { timestamp, userAgent, referrer, ip, page }: VisitorData =
      await req.json();

    // Email content
    const emailContent = `
      <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
          <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
            <h2 style="color: #8b5cf6; border-bottom: 2px solid #8b5cf6; padding-bottom: 10px;">
              üéâ New Portfolio Visitor!
            </h2>
            
            <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #1e293b;">Visitor Details:</h3>
              <ul style="list-style: none; padding: 0;">
                <li style="margin: 10px 0;"><strong>üìÖ Time:</strong> ${new Date(
                  timestamp
                ).toLocaleString()}</li>
                <li style="margin: 10px 0;"><strong>üì± Device:</strong> ${userAgent}</li>
                <li style="margin: 10px 0;"><strong>üîó Referrer:</strong> ${
                  referrer || 'Direct visit'
                }</li>
                <li style="margin: 10px 0;"><strong>üåê IP Address:</strong> ${ip}</li>
                <li style="margin: 10px 0;"><strong>üìÑ Page:</strong> ${page}</li>
              </ul>
            </div>
            
            <div style="background: linear-gradient(135deg, #8b5cf6, #f97316); color: white; padding: 15px; border-radius: 8px; text-align: center;">
              <p style="margin: 0; font-weight: bold;">Someone is checking out your amazing portfolio! üöÄ</p>
            </div>
            
            <p style="margin-top: 20px; color: #64748b; font-size: 14px;">
              This notification was automatically generated by your portfolio website.
            </p>
          </div>
        </body>
      </html>
    `;

    // Send email using a third-party service (EmailJS alternative)
    const emailData = {
      to: 'princekumar27124@gmail.com',
      from: 'pk7437343@gmail.com',
      subject: `üéØ New Portfolio Visitor - ${new Date(
        timestamp
      ).toLocaleDateString()}`,
      html: emailContent,
    };

    // Using EmailJS REST API (you'll need to configure this)
    const emailResponse = await fetch(
      'https://api.emailjs.com/api/v1.0/email/send',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          service_id: 'YOUR_SERVICE_ID', // You'll need to replace this
          template_id: 'YOUR_TEMPLATE_ID', // You'll need to replace this
          user_id: 'YOUR_USER_ID', // You'll need to replace this
          template_params: {
            to_email: 'princekumar27124@gmail.com',
            from_email: 'pk7437343@gmail.com',
            subject: emailData.subject,
            message: `New visitor at ${new Date(
              timestamp
            ).toLocaleString()}\n\nPage: ${page}\nUser Agent: ${userAgent}\nReferrer: ${
              referrer || 'Direct visit'
            }\nIP: ${ip}`,
          },
        }),
      }
    );

    if (!emailResponse.ok) {
      throw new Error(`Email service error: ${emailResponse.statusText}`);
    }

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Visitor notification sent successfully',
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error sending visitor notification:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: 'Failed to send notification',
        details: error instanceof Error ? error.message : 'Unknown error',
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
